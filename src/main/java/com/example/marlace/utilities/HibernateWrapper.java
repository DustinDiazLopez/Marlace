package com.example.marlace.utilities;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.hibernate.resource.transaction.spi.TransactionStatus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Hibernate wrapper
 */
public class HibernateWrapper {

    private static final Logger log = LoggerFactory.getLogger(HibernateWrapper.class);

    /**
     * @see HibernateWrapper#query(SessionFactory, String, Map)
     */
    public static List<?> queryList(final SessionFactory sessionFactory, final String hqlQueryString,
                                    Map<String, Object> params) {
        return query(sessionFactory, hqlQueryString, params).list();
    }

    /**
     * Queries the database with the given hibernate query language string.
     *
     * @param sessionFactory hibernate session factory
     * @param hqlQueryString HQL string
     * @param params         map containing the parameters in the HQL.
     * @return {@link Query} instance of the HQL string.
     * @see Session#createQuery(String)
     */
    public static Query<?> query(final SessionFactory sessionFactory, final String hqlQueryString,
                                 Map<String, Object> params) {
        final Session session = sessionFactory.openSession();
        final Query<?> query = session.createQuery(hqlQueryString);
        for (Map.Entry<String, Object> param : params.entrySet()) query.setParameter(param.getKey(), param.getValue());
        return query;
    }


    /**
     * @see HibernateWrapper#save(SessionFactory, Object...)
     */
    public static Serializable saveOne(final SessionFactory sessionFactory, final Object objects) {
        return save(sessionFactory, objects).get(0);
    }

    /**
     * Saves a transient object (i.e., bring a transient object to a persistent state) <b>IF</b> no identifiers exists
     * in the table it does not exist in the database. Also, returns any autogenerated identifiers.
     *
     * @param sessionFactory the hibernate session
     * @param objects        the objects to persist
     * @return list of autogenerated identifiers.
     * @see HibernateWrapper#storeObjectToDatabase(SessionFactory, TransactionOption, Object...)
     */
    public static List<Serializable> save(final SessionFactory sessionFactory, final Object... objects) {
        return storeObjectToDatabase(sessionFactory, TransactionOption.SAVE, objects);
    }

    /**
     * Saves a transient object or updates a detached object (i.e., bring a transient or detached object to a
     * persistent state).
     *
     * @param sessionFactory the hibernate session
     * @param objects        the objects to persist
     * @return whether the commit to the database was successful.
     * @see HibernateWrapper#storeObjectToDatabase(SessionFactory, TransactionOption, Object...)
     */
    public static boolean saveOrUpdate(final SessionFactory sessionFactory, final Object... objects) {
        final List<Serializable> serializables = storeObjectToDatabase(
                sessionFactory,
                TransactionOption.SAVE_OR_UPDATE,
                objects
        );
        return serializables.size() == 1 &&
                ((TransactionStatus) serializables.get(0)).isNotOneOf(
                        TransactionStatus.FAILED_COMMIT
                );
    }

    /**
     * Saves a transient object (i.e., bring a transient object to a persistent state).
     *
     * @param sessionFactory the hibernate session
     * @param objects        the objects to persist
     * @return whether the commit to the database was successful.
     * @see HibernateWrapper#storeObjectToDatabase(SessionFactory, TransactionOption, Object...)
     */
    public static boolean persist(final SessionFactory sessionFactory, final Object... objects) {
        final List<Serializable> serializables = storeObjectToDatabase(
                sessionFactory,
                TransactionOption.PERSIST,
                objects
        );
        return serializables.size() == 1 &&
                ((TransactionStatus) serializables.get(0)).isNotOneOf(
                        TransactionStatus.FAILED_COMMIT
                );
    }

    /**
     * Returns an object from the database matching the inputted id
     *
     * @param sessionFactory hibernate session factory
     * @param cls            the class of the object
     * @param id             the serializable id of the object
     * @param <T>            the type of the object to be returned object (interpreted from the <b>cls param</b>)
     * @return the object that matches the id
     * @see Session#get(Class, Serializable)
     */
    public static <T> T get(final SessionFactory sessionFactory, final Class<T> cls, final Serializable id) {
        System.err.println(sessionFactory);
        final Session session = sessionFactory.openSession();
        final Transaction transaction = session.beginTransaction();
        final T object = session.get(cls, id);
        transaction.commit();
        return object;
    }

    /**
     * Deletes an object from the database (matching the id).
     * <p>Tip: you don't have to fetch the actual object just an object with its id would be fine</p>
     *
     * @param sessionFactory hibernate session factory
     * @param objects        the objects to delete
     * @return whether the transaction was committed
     * @see Session#delete(Object)
     */
    public static boolean delete(final SessionFactory sessionFactory, final Object... objects) {
        final Session session = sessionFactory.openSession();
        final Transaction transaction = session.beginTransaction();
        for (final Object obj : objects) session.delete(obj);
        transaction.commit();
        return transaction.getStatus().isNotOneOf(TransactionStatus.FAILED_COMMIT);
    }

    /**
     * Stores an object:
     * {@link HibernateWrapper#save(SessionFactory, Object...)},
     * {@link HibernateWrapper#saveOrUpdate(SessionFactory, Object...)}, and
     * {@link HibernateWrapper#persist(SessionFactory, Object...)}
     *
     * @param sessionFactory hibernate session
     * @param option         {@link TransactionOption} whether to save, saveOrUpdate, or persist
     * @param objects        the objects to persist
     * @return if save: returns a list of ids
     * if saveOrUpdate or persist: returns a list with the transaction status
     * @see Session#save(Object)
     * @see Session#saveOrUpdate(Object)
     * @see Session#persist(Object)
     */
    public static List<Serializable> storeObjectToDatabase(
            final SessionFactory sessionFactory,
            final TransactionOption option,
            final Object... objects
    ) {
        final Session session = sessionFactory.openSession();
        final Transaction transaction = session.beginTransaction();
        final List<Serializable> ids = new ArrayList<>(objects.length);
        switch (option) {
            case SAVE:
                for (final Object obj : objects) {
                    ids.add(session.save(obj));
                }
                break;
            case SAVE_OR_UPDATE:
                for (final Object obj : objects) {
                    session.saveOrUpdate(obj);
                }
                break;
            case PERSIST:
                for (final Object obj : objects) {
                    session.persist(obj);
                }
                break;
            default:
                log.error(option + " is not a valid Database Transaction Option");
                ids.add(TransactionStatus.FAILED_COMMIT);
                return ids;
        }

        transaction.commit();

        log.info(transaction.getStatus().toString());

        if (ids.size() == 0) {
            ids.add(transaction.getStatus());
        }

        return ids;
    }

    enum TransactionOption {
        SAVE,
        SAVE_OR_UPDATE,
        PERSIST
    }
}
